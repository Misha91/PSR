#include <taskLib.h>
#include <stdio.h>
#include <kernelLib.h>
#include <semLib.h>
#include <intLib.h>
#include <iv.h>
#include "vxWorks.h"
#include <arch/ppc/ppc5200.h>

#include <xlnx_zynq7k.h>
#include <intLib.h>
#include <iv.h>

#include <arch/ppc/ppc5200.h>
#include <inetLib.h>
#include <sockLib.h>
#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <timers.h>
#include <arpa/inet.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>



#define lenyaAddr "192.168.202.202"

#define MPC52xx_GPT_MODE_DISABLED 0
#define MPC52xx_GPT_MODE_INCAPT   1
#define MPC52xx_GPT_MODE_OUTCMP   2
#define MPC52xx_GPT_MODE_PWM      3
#define MPC52xx_GPT_MODE_GPIO     4

#define MPC52xx_GPT_MODE_GPIO_IN   (0<<4)
#define MPC52xx_GPT_MODE_GPIO_OUT0 (2<<4)
#define MPC52xx_GPT_MODE_GPIO_OUT1 (1<<4)

#define MPC52xx_GPT_STATUS_PIN    (1<<8)
#define MPC52xx_GPT_PWM_OP        (1<<8) /* PWM polarity */


#define PWMF_TIMER_NUM            2
#define PWMB_TIMER_NUM        3
#define PWM_PERIOD        6600         /* = 132 000 kHz / 20 kHz  */

SEM_ID irc_sem;
volatile int irc_a, irc_b;
volatile char last[2];
volatile char abc[2];
volatile int k;
volatile int l;
volatile int kL;	
volatile int c;
int s;
int h=0;
int sockd2;
int sockdL;
void send_init(void){
	
}

struct dataPoints{
	struct dataPoints *ptr;
	int x, y;
};

//struct dataPoints* pM = NULL;
//struct dataPoints* pML = NULL;
//struct dataPoints* pS = NULL;
//struct dataPoints* pSL = NULL;
//struct dataPoints* pE = NULL;
//struct dataPoints* pEL = NULL;
volatile int dataN = 0;

#include "web.c"

void receiveFrom(void){
	
	struct sockaddr_in my_name, cli_name;
		
	int status;
	int addrlen;
	char buf[1024];
	sockd2 = socket(AF_INET, SOCK_DGRAM, 0);
	if (sockd2 == -1)
	{
		perror("Socket creation error");
		exit(1);
	}

		   /* Configure server address */
	my_name.sin_family = AF_INET;
	my_name.sin_addr.s_addr = INADDR_ANY;
	my_name.sin_port = htons(atoi("9999"));

	status = bind(sockd2, (struct sockaddr*)&my_name, sizeof(my_name));
	//irc_init();
	//irc_sem = semCCreate(SEM_Q_FIFO, 0);
	//sprintf(last, "%d%d", irc_a, irc_b);
	//st = taskSpawn("irc_st", 100, 0, 4096, (FUNCPTR) irc_print_status, 0, 0, 0,
	//			0, 0, 0, 0, 0, 0, 0);
	//printf("All is ready. last = %s\n",last);
	while (1){
		
		addrlen = sizeof(cli_name);
				  	//printf("\nReady to receive!");
		status = recvfrom(sockd2, buf, 1024, 0,(struct sockaddr*)&cli_name, &addrlen);						    
		sscanf(buf, "%d", &l);
		//printf("error = %d\n",kL);
		//l = kL;
		taskDelay(1);
	}

}

void updateData(void){
	while(1){
		pM[dataN] = k;
		pS[dataN] = l;
		if (k > l) pE[dataN]=(k-l);
		else pE[dataN]=(l-k);
		dataN++;
		if (dataN >= 1024) dataN = 0;
		taskDelay(1);
	}
	

}

void send_Lenya(void){
	sysClkRateSet(5000);
	
	struct sockaddr_in my_addr, srv_addr;
	
	int count;
	int addrlen;
	int i;
	sockdL = socket(AF_INET, SOCK_DGRAM, 0);
	if (sockdL == -1) {
		perror("Socket creation error");
		exit(1);
	}
	my_addr.sin_family = AF_INET;
	my_addr.sin_addr.s_addr = INADDR_ANY;
	my_addr.sin_port = 0;

	bind(sockdL, (struct sockaddr*) &my_addr, sizeof(my_addr));

	
	/* Set server address */
	srv_addr.sin_family = AF_INET;
	inet_aton(lenyaAddr, &srv_addr.sin_addr);
	srv_addr.sin_port = htons(atoi("9999"));
	printf("connected to Lenya\n");
	while(1){
		char buf[10];
		sprintf(buf, "%d", k);
		while(sendto(sockdL, buf, strlen(buf)+1, 0, (struct sockaddr*)&srv_addr, sizeof(srv_addr)) == -1);
		printf("\n%s\n", buf);
		taskDelay(10);
	}
}

void irc_print_status(void)
{
		printf("helloworld\n");
        while (1) {
                semTake(irc_sem, WAIT_FOREVER);
                if (strcmp(abc, "00")==1){
         				if (strcmp(last, "01")==1) k++;
         				if (strcmp(last, "10")==1) k--;
         				//c = 1;
         				//else k--;
         				
                 }
                 if (strcmp(abc, "01")==1){	
         				if (strcmp(last, "11")==1) k++;
         				if (strcmp(last, "00")==1) k--;
         				//c = 1;
         				//else k--;
                 }
                 if (strcmp(abc, "10")==1){
         				if (strcmp(last, "00")==1) k++;
         				//else k--;
         				if (strcmp(last, "11")==1) k--;
         				//c = 1;
                 }
                 if (strcmp(abc, "11")==1){
         				if (strcmp(last, "10")==1) k++;
         				//else k--;
         				if (strcmp(last, "01")==1) k--;
         				//c = 1;
                 }

         		last[0] = abc[0];
         		last[1] = abc[1];
                //printf("a: %d, b: %d\n", irc_a, irc_b);
                //printf("cur: %s, last: %s\n", abc, last);
        }
}

void print_pos(void)
{
        while (1) {
                //semTake(irc_sem, WAIT_FOREVER);
                //printf("\n%d\n", k);
                taskDelay(500);
        }
}

void irc_isr(void)
{
        int sr; /* status register */
        sr = *(volatile uint32_t *) (0x43c20000 + 0x0004);
        irc_a = (sr & 0x100) >> 8;
        irc_b = (sr & 0x200) >> 9;
       
        sprintf(abc, "%d%d", irc_a, irc_b);
 
        
        semGive(irc_sem);
        *(volatile uint32_t *) (ZYNQ7K_GPIO_BASE + 0x00000298) = 0x4; /* reset (stat) */
}

/*
 *  Enable IRQ
 *
 *  See TRM, 14.2.4 Interrupt Function (pg. 391, pg. 1348). Technical reference
 *  manual link is on rtime HW wiki: https://rtime.felk.cvut.cz/hw/index.php/Zynq
 */
void irc_init(void)
{
        *(volatile uint32_t *) (ZYNQ7K_GPIO_BASE + 0x00000298) = 0x4; /* reset (stat) */
        *(volatile uint32_t *) (ZYNQ7K_GPIO_BASE + 0x00000284) = 0x0; /* set as input (dirm) */
        *(volatile uint32_t *) (ZYNQ7K_GPIO_BASE + 0x0000029c) = 0x4; /* rising edge (type) */
        *(volatile uint32_t *) (ZYNQ7K_GPIO_BASE + 0x000002a0) = 0x0; /* rising edge (polarity) */
        *(volatile uint32_t *) (ZYNQ7K_GPIO_BASE + 0x000002a4) = 0x0; /* rising edge (any) */
        *(volatile uint32_t *) (ZYNQ7K_GPIO_BASE + 0x00000290) = 0x4; /* enable interrupt (en) GPIO2 */

        intConnect(INUM_TO_IVEC(INT_LVL_GPIO), irc_isr, 0);
        intEnable(INT_LVL_GPIO);
}

void irc_disable(void)
{
        *(volatile uint32_t *) (ZYNQ7K_GPIO_BASE + 0x00000294) = 0x4; /* disable interrupt (dis) */

        intDisable(INT_LVL_GPIO);
        intDisconnect(INUM_TO_IVEC(INT_LVL_GPIO), irc_isr, 0);
}

/*
 * Entry point for DKM.
 */
void motor(void)
{		int kl=0;
		printf("s:%d\n",s);
        TASK_ID st, st2, st3, st4, st5, st6;
        irc_init();
        irc_sem = semCCreate(SEM_Q_FIFO, 0);
        st = taskSpawn("irc_st", 50, 0, 4096, (FUNCPTR) irc_print_status, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        st2 = taskSpawn("pos_st", 200, 0, 4096, (FUNCPTR) print_pos, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        st3 = taskSpawn("sendLenya", 75, 0, 4096, (FUNCPTR) send_Lenya, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        st4 = taskSpawn("www", 250, 0, 4096, (FUNCPTR) www, &s, &h, &dataN, 0, 0, 0, 0, 0, 0, 0);
        st5 = taskSpawn("receive", 150, 0, 4096, (FUNCPTR) receiveFrom, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        st6 = taskSpawn("updateData", 200, 0, 4096, (FUNCPTR) updateData, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0);
        
        int sr1; /* status register */
        sr1 = *(volatile uint32_t *) (0x43c20000 + 0x0004);
        int last_a = (sr1 & 0x100) >> 8;
        int last_b = (sr1 & 0x200) >> 9;   
        sprintf(last, "%d%d", last_a, last_b);
        printf("S:%d\n",s);
        printf("init %s\n", last);
        printf("All is ready.\n");
        while(1){        	 
        	if(h == -1 || kl >= 1000){
        		while(!(taskDelete(st4))){
        			printf("unable to delete\n");
        			//taskDelay(1);
        		}
        		close(s);
        		close(sockdL);
        		printf("Out of play time.\n");       	
        		printf("\nwww closed");
        		irc_disable();
        		taskDelete(st);
        		taskDelete(st2);
        		taskDelete(st3);
        		
        		taskDelete(st5);
        		taskDelete(st6);
        		close(sockd2);
        		exit(taskIdSelf());
        	}
        	kl++;
        	taskDelay(1000); 
        	
        }
        

}



//	while(1){
//		if (dataN == 0){
//			struct dataPoints m;
//			pM = &m;
//			//m.ptr = &m;
//			m.x = dataN;
//			m.y = k;
//		}
//		else{
//			struct dataPoints m;			
//			m.x = dataN;
//			m.y = k;
//			if (dataN == 1){
//				pM->ptr = &m;
//				pML = &m;
//			}
//			if (dataN > 1 && dataN <= 20){
//				pML->ptr = &m;
//				pML = &m;
//			}
//			else{
//				pML->ptr = &m;
//				pML = &m;
//				struct dataPoints* tmp1 = pM;
//				pM = pM->ptr;
//				//delete tmp1;
//			}
//		}
//		if (dataN >= 1000000) dataN = 21;
//		dataN++;
//		struct dataPoints* tmp = pM;
//		while(tmp->ptr != NULL){
//			printf("\n%d %d", pM->x, pM->y);
//			tmp = tmp->ptr;
//		}
//		taskDelay(50);
//	}
