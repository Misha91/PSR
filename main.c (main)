#include <intLib.h>
#include <iv.h>
#include "vxWorks.h"
#include <arch/ppc/ppc5200.h>
#include <lite5200b.h>
#include <arch/ppc/ppc5200.h>
#include <taskLib.h>
#include <stdio.h>
#include <kernelLib.h>
#include <semLib.h>
#include <iv.h>
#include <xlnx_zynq7k.h>

#include <sys/types.h>
#include <sys/socket.h>
#include <netinet/in.h>
#include <arpa/inet.h>
#include <string.h>
#include <stdlib.h>
#include <unistd.h>

volatile long int k = 0;
volatile int dr;

#define MAX_BUF 1024

#define MPC52xx_GPT_MODE_DISABLED 0
#define MPC52xx_GPT_MODE_INCAPT   1
#define MPC52xx_GPT_MODE_OUTCMP   2
#define MPC52xx_GPT_MODE_PWM      3
#define MPC52xx_GPT_MODE_GPIO     4

#define MPC52xx_GPT_MODE_GPIO_IN   (0<<4)
#define MPC52xx_GPT_MODE_GPIO_OUT0 (2<<4)
#define MPC52xx_GPT_MODE_GPIO_OUT1 (1<<4)

#define MPC52xx_GPT_STATUS_PIN    (1<<8)
#define MPC52xx_GPT_PWM_OP        (1<<8) /* PWM polarity */

#define PWMF_TIMER_NUM            2
#define PWMB_TIMER_NUM        3
#define PWM_PERIOD        6600         /* = 132 000 kHz / 20 kHz  */

SEM_ID irc_sem;
volatile int irc_a, irc_b;
volatile char last[2];
volatile char now[2];
int konec = 0;

void irc_print_status(void) {
	while (1) {
		semTake(irc_sem, WAIT_FOREVER);
		sprintf(now, "%d%d", irc_a, irc_b);

		if (strcmp(now, "00") == 1) {
			if (strcmp(last, "01") == 1) {
				k++;
			}
			if (strcmp(last, "10") == 1) {
				k--;
			}
		}
		if (strcmp(now, "01") == 1) {
			if (strcmp(last, "00") == 1) {
				k--;
			}
			if (strcmp(last, "11") == 1) {
				k++;
			}
		}
		if (strcmp(now, "10") == 1) {
			if (strcmp(last, "00") == 1) {
				k++;
			}
			if (strcmp(last, "11") == 1) {
				k--;
			}
		}
		if (strcmp(now, "11") == 1) {
			if (strcmp(last, "01") == 1) {
				k--;
			}
			if (strcmp(last, "10") == 1) {
				k++;
			}
		}

		last[0] = now[0];
		last[1] = now[1];
	}

}

void contr(int dir, int speed) {

	if (dir == 1) {

		*(volatile uint32_t *) (0x43c20000 + 0x000C) = speed;
		*(volatile uint32_t *) (0x43c20000 + 0x000C) |= 0 << 30;
		*(volatile uint32_t *) (0x43c20000 + 0x000C) |= 1 << 31;

	} else {

		*(volatile uint32_t *) (0x43c20000 + 0x000C) = speed;
		*(volatile uint32_t *) (0x43c20000 + 0x000C) |= 0 << 31;
		*(volatile uint32_t *) (0x43c20000 + 0x000C) |= 1 << 30;
	}
}

void irc_isr(void) {
	int sr; /* status register */
	sr = *(volatile uint32_t *) (0x43c20000 + 0x0004);
	irc_a = (sr & 0x100) >> 8;
	irc_b = (sr & 0x200) >> 9;
	semGive(irc_sem);
	*(volatile uint32_t *) (ZYNQ7K_GPIO_BASE + 0x00000298) = 0x4; /* reset (stat) */
}

/*
 *  Enable IRQ
 *
 *  See TRM, 14.2.4 Interrupt Function (pg. 391, pg. 1348). Technical reference
 *  manual link is on rtime HW wiki: https://rtime.felk.cvut.cz/hw/index.php/Zynq
 */
void irc_init(void) {
	*(volatile uint32_t *) (ZYNQ7K_GPIO_BASE + 0x00000298) = 0x4; /* reset (stat) */
	*(volatile uint32_t *) (ZYNQ7K_GPIO_BASE + 0x00000284) = 0x0; /* set as input (dirm) */
	*(volatile uint32_t *) (ZYNQ7K_GPIO_BASE + 0x0000029c) = 0x4; /* rising edge (type) */
	*(volatile uint32_t *) (ZYNQ7K_GPIO_BASE + 0x000002a0) = 0x0; /* rising edge (polarity) */
	*(volatile uint32_t *) (ZYNQ7K_GPIO_BASE + 0x000002a4) = 0x0; /* rising edge (any) */
	*(volatile uint32_t *) (ZYNQ7K_GPIO_BASE + 0x00000290) = 0x4; /* enable interrupt (en) GPIO2 */

	*(volatile uint32_t *) (0x43c20000 + 0x0000) = 1 << 6;
	*(volatile uint32_t *) (0x43c20000 + 0x0008) = 5000;

	intConnect(INUM_TO_IVEC(INT_LVL_GPIO), irc_isr, 0);
	intEnable(INT_LVL_GPIO);
}

void irc_disable(void) {
	*(volatile uint32_t *) (ZYNQ7K_GPIO_BASE + 0x00000294) = 0x4; /* disable interrupt (dis) */

	intDisable(INT_LVL_GPIO);
	intDisconnect(INUM_TO_IVEC(INT_LVL_GPIO), irc_isr, 0);
}

/*
 * Entry point for DKM.
 */
void motor(void) {
	TASK_ID st;

	sysClkRateSet(5000);
	int sockd;
	struct sockaddr_in my_name, cli_name;

	int status;
	int addrlen;
	char buf[MAX_BUF];
	sockd = socket(AF_INET, SOCK_DGRAM, 0);
	if (sockd == -1) {
		perror("Socket creation error");
		exit(1);
	}

	/* Configure server address */
	my_name.sin_family = AF_INET;
	my_name.sin_addr.s_addr = INADDR_ANY;
	my_name.sin_port = htons(atoi("9999"));

	status = bind(sockd, (struct sockaddr*) &my_name, sizeof(my_name));
	irc_init();
	irc_sem = semCCreate(SEM_Q_FIFO, 0);
	sprintf(last, "%d%d", irc_a, irc_b);
	st = taskSpawn("irc_st", 100, 0, 4096, (FUNCPTR) irc_print_status, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0);
	printf("All is ready. last = %s\n", last);
	while (1) {

		addrlen = sizeof(cli_name);
		//printf("\nReady to receive!");
		status = recvfrom(sockd, buf, MAX_BUF, 0, (struct sockaddr*) &cli_name,
				&addrlen);

		sscanf(buf, "%d", &konec);
		printf("reseved k2 = %s, k1 = %d\n", buf, k);

		taskDelay(10);
	}

}
void regulator() {
	int p1 = 250;
	int p = 110;
	while (1) {
		if (k > konec) {
			if (k - konec > 5) {
				int ms = p1 * (k - konec);

				contr(1, min(ms, 5000));

			} else {
				int ms = p * (k - konec);

				contr(1, min(ms, 5000));
			}
		}
		if (k < konec) {
			if (konec - k > 5) {
				int ms = p1 * (konec - k);
				contr(0, min(ms, 5000));
			} else {
				int ms = p * (konec - k);
				contr(0, min(ms, 5000));
			}
		}
		taskDelay(10);
	}
}

void send_Lenya(void) {
	int sockd;
	struct sockaddr_in my_addr, srv_addr;

	int count;
	int addrlen;
	int i;
	sockd = socket(AF_INET, SOCK_DGRAM, 0);
	if (sockd == -1) {
		perror("Socket creation error");
		exit(1);
	}
	my_addr.sin_family = AF_INET;
	my_addr.sin_addr.s_addr = INADDR_ANY;
	my_addr.sin_port = 0;

	bind(sockd, (struct sockaddr*) &my_addr, sizeof(my_addr));

	/* Set server address */
	srv_addr.sin_family = AF_INET;
	inet_aton("192.168.202.209", &srv_addr.sin_addr);
	srv_addr.sin_port = htons(atoi("9999"));
	while (1) {
		char buf[10];
		sprintf(buf, "%d", k);
		sendto(sockd, buf, strlen(buf) + 1, 0, (struct sockaddr*) &srv_addr,
				sizeof(srv_addr));
		taskDelay(10);
	}
}

void task1() {

	taskSpawn("motor", 100, 0, 4096, (FUNCPTR) motor, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0);
	taskSpawn("regulator", 100, 0, 4096, (FUNCPTR) regulator, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0);
	taskSpawn("send", 100, 0, 4096, (FUNCPTR) send_Lenya, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0);

}

